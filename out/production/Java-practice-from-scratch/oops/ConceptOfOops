what are classes => 1) class is just a logical construct/blue print or we can say a set of rule to make something that physically exist
                    2)

what are objects => 1) Object are instance of class
                    2) Object are physical reality
                    3) this is the thing that actually occupying space in memory
                    4) eg. Human is class (which have properties like eye, legs, hand, ear, nose etc.. and have behaviour like eating food, walking, etc)
                       and we all are the object of Human class (whenever a new baby is born a new object is created of class Human)
                    5) Objects have some properties and behaviour


Access specifier/Modifier => in Java, Access modifiers help to restrict the scope of a class, constructor, variable,
                    method, or data member. It provides security,  accessibility, etc to the user depending upon the
                    access modifier used with the element

Types of Access Modifiers in Java =>
There are four types of access modifiers available in Java:
(1) Default – No keyword required
(2) Private
(3) Protected
(4) Public

1. Default Access Modifier :- When no access modifier is specified for a class, method, or data member –
                              It is said to be having the default access modifier by default. The data members,
                              classes, or methods that are not declared using any access modifiers i.e. having default
                              access modifiers are accessible only within the same package.

2. Private Access Modifier :- The private access modifier is specified using the keyword private.
                              The methods or data members declared as private are accessible only
                              within the class in which they are declared.
                              -> Any other class of the same package will not be able to access these members.


3. Protected Access Modifier :- The protected access modifier is specified using the keyword protected. The methods or data
                                members declared as protected are accessible within the same package or subclasses in same/different packages.

Public Access modifier :- The public access modifier is specified using the keyword public. The public access modifier has the widest scope
                          among all other access modifiers. Classes, methods, or data members that are declared as public are accessible from
                          everywhere in the program. There is no restriction on the scope of public data members.

Constructors => Constructors are special type of function in java which have no return type
                we can easily understand the what is constructor with the help of constructor
                1) compiler automatically call the constructor when a new object is created of the class
                2) It has no return type
                3) Name of constructor is the same as className
                4) constructor are use to initialize the objects and variables
                5) when no constructor is explicitly provided in class java compiler will automatically call a default constructor

Types of Constructor : Constructors are three type
                       1) default constructor
                       2) parameterized constructor
                       3) copy constructor

1. Default Constructor in Java :- A constructor that has no parameters is known as default the constructor. A default constructor is invisible.

2. Parameterized Constructor in Java :- A constructor that has parameters is known as parameterized constructor. If we want to initialize fields
                                        of the class with our own values, then use a parameterized constructor.

3. Copy Constructor in Java :- Unlike other constructors copy constructor is passed with another object which copies the data available from the
                               passed object to the newly created object.


Method Overloading in Java => It is one of the feature of java. Method overloading allows us to use different method having the same name but with different
                              signature where the  signature can be differ by the number of inputs in the parameter or type of inputs parameter.
                              It is also known as compile time polymorphism.


(this) KEYWORD in java => In Java, ‘this’ is a reference variable that refers to the current object, or can be said “this” in Java is a keyword that refers to the
                          current object instance. It can be used to call current class methods and fields, to pass an instance of the current class as a parameter,
                          and to differentiate between the local and instance variables. Using “this” reference can improve code readability and reduce naming conflicts.

// Java code for using 'this' keyword to
// refer current class instance variables
class Test {
	int a;
	int b;

	// Parameterized constructor
	Test(int a, int b)
	{
		this.a = a;
		this.b = b;
	}

	void display()
	{
		// Displaying value of variables a and b
		System.out.println("a = " + a + " b = " + b);
	}

	public static void main(String[] args)
	{
		Test object = new Test(10, 20);
		object.display();
	}
}


"static" keyword in java => The static keyword is used for a constant variable or a method that is the same for every instance of a class.
                            The static keyword is a non-access modifier in Java that is applicable for the following:
                            (1) Blocks
                            (2) Variables
                            (3) Methods
                            (4) Classes

-> The static keyword belongs to the class than an instance of the class.
 Characteristics of static keyword:-
 1) Accessible without object instantiation:- Static members can be accessed without  creating an object of a class
 2) Associated with class, not objects:-  Static members are associated with the class, not with individual objects. This means that changes
    to a static member are reflected in all instances of the class,
 3) Cannot access non-static members:- Static methods and variables cannot access non-static members of a class, as they are not associated with any
    particular instance of the class.
 4) Can be overloaded, but not overridden:- Static methods can be overloaded, which means that you can define multiple methods with the same name but
   different parameters. However, they cannot be overridden, as they are associated with the class rather than with a particular instance of the class.


 // Java program to demonstrate that a static member
 // can be accessed before instantiating a class

 class Test
 {
     // static method
     static void m1()
     {
         System.out.println("from m1");
     }

     public static void main(String[] args)
     {
           // calling m1 without creating
           // any object of class Test
            m1();
     }
 }


Java Arrays => Java array is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location.
               ->  It is a data structure where we store similar elements. We can store only a fixed set of elements in a Java array.

What are string in java => Strings are the type of objects that can store the character of values and in Java, every character is stored in 16 bits
                           -> String is a class in java but can be used like a primitive data-type
                           -> It is the most commonly used class in java
                           -> String are immutable in java(means that we can not change the String object)
                           eg. String a = "Kunal";
                               a = "Kushwaha";
                               here in this example we are not changing the value of (a) but we are creating a new string object("Kushwaha") in heap memory

Java StringBuffer Class => Java StringBuffer class is used to create mutable (modifiable) String objects. The StringBuffer class in Java is the same as String
                           class except it is mutable i.e. it can be changed.

Advantages of StringBuffer : 1) It is mutable
                             2) It is more efficient than String because no new object will created when we will modify it
                             3) Java StringBuffer class is thread-safe i.e. multiple threads cannot access it simultaneously. So it is safe and will result in an order.

Important Constructors of StringBuffer Class =>
        Constructors                                     Description

     StringBuffer()	                     It creates an empty String buffer with the initial capacity of 16.
     StringBuffer(String str)	         It creates a String buffer with the specified string..
     StringBuffer(int capacity)	         It creates an empty String buffer with the specified capacity as length.


Important methods of StringBuffer class =>
  1) append(String s) -> It is used to append the specified string with this string.
  2) insert(int offset, String s) -> It is used to insert the specified string with this string at the specified position.
  3) replace(int startIndex, int endIndex, String str) -> It is used to replace the string from specified startIndex and endIndex.
  4) reverse() -> 	is used to reverse the string.
  5) length() -> 	It is used to return the length of the string i.e. total number of characters.
  6) charAt(int index) -> It is used to return the character at the specified position.
  7) delete(int startIndex, int endIndex) -> It is used to delete the string from specified startIndex and endIndex.
  8) substring(int beginIndex) -> It is used to return the substring from the specified beginIndex.


String tokenizer in java => The java.util.StringTokenizer class allows you to break a String into tokens. It is simple way to break a String. It is a legacy class of Java.
Constructors of the StringTokenizer Class :::
                                            1) StringTokenizer(String str) ->    It creates StringTokenizer with specified string.
                                            2) StringTokenizer(String str, String delim) -> It creates StringTokenizer with specified string and delimiter.
                                            3)


Wrapper Class  in java => A Wrapper class in Java is a class whose object wraps or contains primitive data types. When we create an object to a wrapper class, it contains a
                          field and in this field, we can store primitive data types. In other words, we can wrap a primitive value into a wrapper class object. Let’s check
                          on the wrapper classes in Java with examples.


